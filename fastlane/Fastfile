default_platform :ios

platform :ios do

  before_all do
    # Always check for a fastlane update
    update_fastlane

    # This is the minimum version number required.
    fastlane_version "2.99.1"

    # Make sure the repo is in a clean state
    ensure_git_status_clean
  end

  desc "Setup the workspace for development"
  desc "Should be ran by all developers before starting any development"
  lane :setup do
    carthage(command: "bootstrap", platform: "iOS")
  end

  desc "Update all dependencies managed by Carthage"
  lane :carthageUpdate do
    carthage(command: "update", platform: "iOS")
  end

  desc "Run all the unit tests and generate a nice report"
  desc "Report will open in default web browser after completing tests"
  lane :testApp do
    scan
  end

  desc "Build and create Screenshots"
  desc "This action does the following:"
  desc ""
  desc "- Invoke the Snapfile to create all the screenshots"
  lane :createScreenshots do
    snapshot(erase_simulator: true)
  end

  desc "Update the version number of all items in the project"
  desc "Needs to be invoked with version:numberHere"
  lane :updateVersionNumber do |options|
    increment_version_number(version_number: options[:version])
  end

  desc "Create a new archive so its ready for App Store Submission"
  desc "This action does the following:"
  desc ""
  desc "- Increment the build number"
  desc "- Build the app in 'Release' configuration"
  desc "- Update all certs and mobile provisioning"
  #desc "- Upload to TestFlight (User needs to pull release trigger)"
  desc "- Commit the build number change, tag and push to git"
  lane :bumpAndArchive do
    # Build
    increment_build_number
    gym(scheme: "Bike Buddy", configuration: "Release")

    # Commit Build Number Change
    version = get_version_number(xcodeproj: "Bike Buddy.xcodeproj")
    build = get_build_number(xcodeproj: "Bike Buddy.xcodeproj")

    commit_version_bump(xcodeproj: "Bike Buddy.xcodeproj", message: "Version Bump to #{version}-#{build}")
    add_git_tag tag: "release/#{version}/#{build}"
    push_to_git_remote
  end

  lane :uploadMetadata do
    deliver(
      skip_binary_upload: true
    )
  end

  # After Actions

  after_all do |lane|
    # Only called if successful
    notification(subtitle: "Fastlane Success!", message: "Finished driving #{lane} lane")
  end

  error do |lane, exception|
    notification(subtitle: "Fastlane Failure :(", message: "Error in driving #{lane} lane")
  end
end
